{"ast":null,"code":"var _jsxFileName = \"/Users/dayoni/Desktop/emotion-diary/src/components/DiaryList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport MyButton from \"./MyButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"latest\"\n}, {\n  value: \"oldest\",\n  name: \"oldest\"\n}];\nconst filterOptionList = [{\n  value: \"all\",\n  name: \"All\"\n}, {\n  value: \"positive\",\n  name: \"Positive\"\n}, {\n  value: \"negative\",\n  name: \"Negative\"\n}];\nconst ControlMenu = ({\n  value,\n  onChange,\n  optionList\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"ControlMenu\",\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item.value,\n      children: item.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c = ControlMenu;\nconst DiaryList = ({\n  diaryList\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [sortType, setSortType] = useState(\"latest\");\n  const [filter, setFilter] = useState(\"all\");\n  const filterCallBack = item => {\n    if (filter === \"positive\") {\n      return item.emotion <= 3;\n    } else {\n      return item.emotion > 3;\n    }\n  };\n  const getProcessedDiaryList = () => {\n    const compareDate = (a, b) => {\n      if (sortType === \"latest\") {\n        return b.date - a.date;\n      } else {\n        return a.date - b.date;\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    const filterList = filter === \"all\" ? copyList : copyList.filter(item => filterCallBack(item));\n    const sortedList = filterList.sort(compareDate);\n    return sortedList;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryList\",\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: filter,\n      onChange: setFilter,\n      optionList: filterOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      type: \"positive\",\n      text: \"Write a new diary\",\n      onClick: () => {\n        navigate(\"/new\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), getProcessedDiaryList().map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.content, \" \", item.emotion]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(DiaryList, \"VdLArhpuv+Ovz0OG6T/cTBKkUY0=\", false, function () {\n  return [useNavigate];\n});\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["React","useState","useNavigate","MyButton","jsxDEV","_jsxDEV","sortOptionList","value","name","filterOptionList","ControlMenu","onChange","optionList","className","e","target","children","map","item","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","DiaryList","diaryList","_s","navigate","sortType","setSortType","filter","setFilter","filterCallBack","emotion","getProcessedDiaryList","compareDate","a","b","date","copyList","JSON","parse","stringify","filterList","sortedList","sort","type","text","onClick","content","id","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/dayoni/Desktop/emotion-diary/src/components/DiaryList.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { ProcessedComment } from \"App\";\nimport MyButton from \"./MyButton\";\n\ninterface Option {\n    value: string;\n    name: string;\n}\nconst sortOptionList: Option[] = [\n    { value: \"latest\", name: \"latest\" },\n    { value: \"oldest\", name: \"oldest\" },\n];\n\nconst filterOptionList: Option[] = [\n    { value: \"all\", name: \"All\" },\n    { value: \"positive\", name: \"Positive\" },\n    { value: \"negative\", name: \"Negative\" },\n];\n\ninterface ControlMenuProps {\n    value: Option[\"value\"];\n    onChange: (value: string) => void;\n    optionList: Option[];\n}\n\ninterface DiaryListProps {\n    diaryList: ProcessedComment[];\n}\n\nconst ControlMenu: React.FC<ControlMenuProps> = ({ value, onChange, optionList }) => {\n    return (\n        <select className=\"ControlMenu\" value={value} onChange={(e) => onChange(e.target.value)}>\n            {optionList.map((item, idx) => (\n                <option key={idx} value={item.value}>\n                    {item.name}\n                </option>\n            ))}\n        </select>\n    );\n};\nconst DiaryList: React.FC<DiaryListProps> = ({ diaryList }) => {\n    const navigate = useNavigate();\n    const [sortType, setSortType] = useState(\"latest\");\n    const [filter, setFilter] = useState(\"all\");\n\n    const filterCallBack = (item: ProcessedComment) => {\n        if (filter === \"positive\") {\n            return item.emotion <= 3;\n        } else {\n            return item.emotion > 3;\n        }\n    };\n\n    const getProcessedDiaryList = (): ProcessedComment[] => {\n        const compareDate = (a: ProcessedComment, b: ProcessedComment) => {\n            if (sortType === \"latest\") {\n                return b.date - a.date;\n            } else {\n                return a.date - b.date;\n            }\n        };\n\n        const copyList = JSON.parse(JSON.stringify(diaryList));\n        const filterList =\n            filter === \"all\" ? copyList : copyList.filter((item: ProcessedComment) => filterCallBack(item));\n        const sortedList = filterList.sort(compareDate);\n        return sortedList;\n    };\n\n    return (\n        <div className=\"DiaryList\">\n            <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList} />\n            <ControlMenu value={filter} onChange={setFilter} optionList={filterOptionList} />\n            <MyButton\n                type={\"positive\"}\n                text=\"Write a new diary\"\n                onClick={() => {\n                    navigate(\"/new\");\n                }}\n            />\n            {getProcessedDiaryList().map((item) => (\n                <div key={item.id}>\n                    {item.content} {item.emotion}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nDiaryList.defaultProps = {\n    diaryList: [],\n};\n\nexport default DiaryList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}